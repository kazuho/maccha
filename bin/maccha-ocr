#!/usr/bin/env ruby

require 'net/http'
require 'json'

MACCHA_HOSTPORT = ENV.fetch('MACCHA_HOSTPORT', nil)

# Show help if no arguments or --help is given
if ARGV.empty? || ARGV[0] == '--help'
  puts <<~USAGE
    Usage: #{File.basename($0)} [--help] /path/to/image.png

    Description:
      Reads the specified image file,
      invokes the macOS Shortcuts "ExtractText2" to perform OCR,
      and prints the extracted text to stdout.

    Options:
      --help    Show this help message and exit
    
    You have to define the "ExtractText" handler in the Shortcuts app,
    see docs/shortcut-app-extracttext.png.
  USAGE
  exit 0
end

# if running inside the maccha sandbox, invoke the Web API
if MACCHA_HOSTPORT
  uri = URI("http://#{MACCHA_HOSTPORT}/safe-commands");
  post = Net::HTTP::Post.new(uri)
  post['content-type'] = 'application/json'
  post.body = { exec: 'maccha-ocr', argv: [ARGV[0]], stdin: '' }.to_json
  resp = Net::HTTP.start(uri.hostname, uri.port) { |http| http.request(post) }
  puts resp.body
  exit 0
end

# passing relative paths to osascript generates a warning
img_path = File.expand_path(ARGV[0])

# Replace this Ruby process with osascript, passing the script as one -e
exec "osascript", "-e", <<~APPLESCRIPT
  set imgPath to "#{img_path}"
  set imgFile to POSIX file imgPath as alias
  tell application "Shortcuts Events"
    run shortcut "ExtractText" with input imgFile
  end tell
  return result
APPLESCRIPT

warn "failed to spawn osascript:#{$?.exitstatus}"
exit 1